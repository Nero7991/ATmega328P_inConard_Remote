
ATmega328P_inConard_Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000153a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b2  00800100  00800100  0000153a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006ceb  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001659  00000000  00000000  0000883f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d4f  00000000  00000000  00009e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012c0  00000000  00000000  0000cbe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000024cf  00000000  00000000  0000dea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004113  00000000  00000000  00010377  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  0001448a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__vector_1>
       8:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_2>
       c:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__vector_3>
      10:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_4>
      14:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__vector_5>
      18:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_11>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	44 6f       	ori	r20, 0xF4	; 244
      6a:	6e 65       	ori	r22, 0x5E	; 94
	...

0000006d <_ZZ4mainE3__c>:
      6d:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00        Powering on....

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 ec       	ldi	r30, 0xC6	; 198
      90:	f4 e1       	ldi	r31, 0x14	; 20
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 30       	cpi	r26, 0x00	; 0
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 3b       	cpi	r26, 0xB2	; 178
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <main>
      b2:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <_Z15getReadyToSleepv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
      ba:	8f ea       	ldi	r24, 0xAF	; 175
      bc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
      c0:	08 95       	ret

000000c2 <_Z6wakeUpv>:
      c2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
      c6:	08 95       	ret

000000c8 <_Z10allowSleepb>:
      c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
      cc:	08 95       	ret

000000ce <_Z12sleepAllowedv>:
      ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
      d2:	08 95       	ret

000000d4 <_Z14SPI_MasterInitv>:
      d4:	24 98       	cbi	0x04, 4	; 4
      d6:	84 b1       	in	r24, 0x04	; 4
      d8:	8c 62       	ori	r24, 0x2C	; 44
      da:	84 b9       	out	0x04, r24	; 4
      dc:	2a 9a       	sbi	0x05, 2	; 5
      de:	8c b5       	in	r24, 0x2c	; 44
      e0:	82 65       	ori	r24, 0x52	; 82
      e2:	8c bd       	out	0x2c, r24	; 44
      e4:	08 95       	ret

000000e6 <_Z18SPI_MasterTransmitc>:
      e6:	8e bd       	out	0x2e, r24	; 46
      e8:	0d b4       	in	r0, 0x2d	; 45
      ea:	07 fe       	sbrs	r0, 7
      ec:	fd cf       	rjmp	.-6      	; 0xe8 <_Z18SPI_MasterTransmitc+0x2>
      ee:	8e b5       	in	r24, 0x2e	; 46
      f0:	08 95       	ret

000000f2 <_Z11Init_CTC_T1hj>:
      f2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
      f6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
      fa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
      fe:	87 70       	andi	r24, 0x07	; 7
     100:	88 60       	ori	r24, 0x08	; 8
     102:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     10c:	78 94       	sei
     10e:	08 95       	ret

00000110 <_Z11setPinStatehhb>:
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	e9 f0       	breq	.+58     	; 0x14e <_Z11setPinStatehhb+0x3e>
     114:	18 f0       	brcs	.+6      	; 0x11c <_Z11setPinStatehhb+0xc>
     116:	82 30       	cpi	r24, 0x02	; 2
     118:	99 f1       	breq	.+102    	; 0x180 <_Z11setPinStatehhb+0x70>
     11a:	08 95       	ret
     11c:	44 23       	and	r20, r20
     11e:	59 f0       	breq	.+22     	; 0x136 <_Z11setPinStatehhb+0x26>
     120:	25 b1       	in	r18, 0x05	; 5
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	02 c0       	rjmp	.+4      	; 0x12c <_Z11setPinStatehhb+0x1c>
     128:	88 0f       	add	r24, r24
     12a:	99 1f       	adc	r25, r25
     12c:	6a 95       	dec	r22
     12e:	e2 f7       	brpl	.-8      	; 0x128 <_Z11setPinStatehhb+0x18>
     130:	82 2b       	or	r24, r18
     132:	85 b9       	out	0x05, r24	; 5
     134:	08 95       	ret
     136:	25 b1       	in	r18, 0x05	; 5
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <_Z11setPinStatehhb+0x32>
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	6a 95       	dec	r22
     144:	e2 f7       	brpl	.-8      	; 0x13e <_Z11setPinStatehhb+0x2e>
     146:	80 95       	com	r24
     148:	82 23       	and	r24, r18
     14a:	85 b9       	out	0x05, r24	; 5
     14c:	08 95       	ret
     14e:	44 23       	and	r20, r20
     150:	59 f0       	breq	.+22     	; 0x168 <_Z11setPinStatehhb+0x58>
     152:	28 b1       	in	r18, 0x08	; 8
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	02 c0       	rjmp	.+4      	; 0x15e <_Z11setPinStatehhb+0x4e>
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	6a 95       	dec	r22
     160:	e2 f7       	brpl	.-8      	; 0x15a <_Z11setPinStatehhb+0x4a>
     162:	82 2b       	or	r24, r18
     164:	88 b9       	out	0x08, r24	; 8
     166:	08 95       	ret
     168:	28 b1       	in	r18, 0x08	; 8
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <_Z11setPinStatehhb+0x64>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	6a 95       	dec	r22
     176:	e2 f7       	brpl	.-8      	; 0x170 <_Z11setPinStatehhb+0x60>
     178:	80 95       	com	r24
     17a:	82 23       	and	r24, r18
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	08 95       	ret
     180:	44 23       	and	r20, r20
     182:	59 f0       	breq	.+22     	; 0x19a <_Z11setPinStatehhb+0x8a>
     184:	2b b1       	in	r18, 0x0b	; 11
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <_Z11setPinStatehhb+0x80>
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	6a 95       	dec	r22
     192:	e2 f7       	brpl	.-8      	; 0x18c <_Z11setPinStatehhb+0x7c>
     194:	82 2b       	or	r24, r18
     196:	8b b9       	out	0x0b, r24	; 11
     198:	08 95       	ret
     19a:	2b b1       	in	r18, 0x0b	; 11
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <_Z11setPinStatehhb+0x96>
     1a2:	88 0f       	add	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <_Z11setPinStatehhb+0x92>
     1aa:	80 95       	com	r24
     1ac:	82 23       	and	r24, r18
     1ae:	8b b9       	out	0x0b, r24	; 11
     1b0:	08 95       	ret

000001b2 <_Z15setPinDirectionhhb>:
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	e9 f0       	breq	.+58     	; 0x1f0 <_Z15setPinDirectionhhb+0x3e>
     1b6:	18 f0       	brcs	.+6      	; 0x1be <_Z15setPinDirectionhhb+0xc>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	99 f1       	breq	.+102    	; 0x222 <_Z15setPinDirectionhhb+0x70>
     1bc:	08 95       	ret
     1be:	44 23       	and	r20, r20
     1c0:	59 f0       	breq	.+22     	; 0x1d8 <_Z15setPinDirectionhhb+0x26>
     1c2:	24 b1       	in	r18, 0x04	; 4
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <_Z15setPinDirectionhhb+0x1c>
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	6a 95       	dec	r22
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <_Z15setPinDirectionhhb+0x18>
     1d2:	82 2b       	or	r24, r18
     1d4:	84 b9       	out	0x04, r24	; 4
     1d6:	08 95       	ret
     1d8:	24 b1       	in	r18, 0x04	; 4
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <_Z15setPinDirectionhhb+0x32>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	6a 95       	dec	r22
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <_Z15setPinDirectionhhb+0x2e>
     1e8:	80 95       	com	r24
     1ea:	82 23       	and	r24, r18
     1ec:	84 b9       	out	0x04, r24	; 4
     1ee:	08 95       	ret
     1f0:	44 23       	and	r20, r20
     1f2:	59 f0       	breq	.+22     	; 0x20a <_Z15setPinDirectionhhb+0x58>
     1f4:	27 b1       	in	r18, 0x07	; 7
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <_Z15setPinDirectionhhb+0x4e>
     1fc:	88 0f       	add	r24, r24
     1fe:	99 1f       	adc	r25, r25
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <_Z15setPinDirectionhhb+0x4a>
     204:	82 2b       	or	r24, r18
     206:	87 b9       	out	0x07, r24	; 7
     208:	08 95       	ret
     20a:	27 b1       	in	r18, 0x07	; 7
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <_Z15setPinDirectionhhb+0x64>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <_Z15setPinDirectionhhb+0x60>
     21a:	80 95       	com	r24
     21c:	82 23       	and	r24, r18
     21e:	87 b9       	out	0x07, r24	; 7
     220:	08 95       	ret
     222:	44 23       	and	r20, r20
     224:	59 f0       	breq	.+22     	; 0x23c <_Z15setPinDirectionhhb+0x8a>
     226:	2a b1       	in	r18, 0x0a	; 10
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	02 c0       	rjmp	.+4      	; 0x232 <_Z15setPinDirectionhhb+0x80>
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	6a 95       	dec	r22
     234:	e2 f7       	brpl	.-8      	; 0x22e <_Z15setPinDirectionhhb+0x7c>
     236:	82 2b       	or	r24, r18
     238:	8a b9       	out	0x0a, r24	; 10
     23a:	08 95       	ret
     23c:	2a b1       	in	r18, 0x0a	; 10
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	02 c0       	rjmp	.+4      	; 0x248 <_Z15setPinDirectionhhb+0x96>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	6a 95       	dec	r22
     24a:	e2 f7       	brpl	.-8      	; 0x244 <_Z15setPinDirectionhhb+0x92>
     24c:	80 95       	com	r24
     24e:	82 23       	and	r24, r18
     250:	8a b9       	out	0x0a, r24	; 10
     252:	08 95       	ret

00000254 <_Z21setPinChangeInterrupthhb>:
     254:	e8 e6       	ldi	r30, 0x68	; 104
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	90 81       	ld	r25, Z
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	08 2e       	mov	r0, r24
     260:	02 c0       	rjmp	.+4      	; 0x266 <_Z21setPinChangeInterrupthhb+0x12>
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <_Z21setPinChangeInterrupthhb+0xe>
     26a:	29 2b       	or	r18, r25
     26c:	20 83       	st	Z, r18
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	81 f0       	breq	.+32     	; 0x292 <_Z21setPinChangeInterrupthhb+0x3e>
     272:	18 f0       	brcs	.+6      	; 0x27a <_Z21setPinChangeInterrupthhb+0x26>
     274:	82 30       	cpi	r24, 0x02	; 2
     276:	c9 f0       	breq	.+50     	; 0x2aa <_Z21setPinChangeInterrupthhb+0x56>
     278:	08 95       	ret
     27a:	eb e6       	ldi	r30, 0x6B	; 107
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	02 c0       	rjmp	.+4      	; 0x288 <_Z21setPinChangeInterrupthhb+0x34>
     284:	44 0f       	add	r20, r20
     286:	55 1f       	adc	r21, r21
     288:	6a 95       	dec	r22
     28a:	e2 f7       	brpl	.-8      	; 0x284 <_Z21setPinChangeInterrupthhb+0x30>
     28c:	48 2b       	or	r20, r24
     28e:	40 83       	st	Z, r20
     290:	08 95       	ret
     292:	ec e6       	ldi	r30, 0x6C	; 108
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <_Z21setPinChangeInterrupthhb+0x4c>
     29c:	44 0f       	add	r20, r20
     29e:	55 1f       	adc	r21, r21
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <_Z21setPinChangeInterrupthhb+0x48>
     2a4:	48 2b       	or	r20, r24
     2a6:	40 83       	st	Z, r20
     2a8:	08 95       	ret
     2aa:	ed e6       	ldi	r30, 0x6D	; 109
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <_Z21setPinChangeInterrupthhb+0x64>
     2b4:	44 0f       	add	r20, r20
     2b6:	55 1f       	adc	r21, r21
     2b8:	6a 95       	dec	r22
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <_Z21setPinChangeInterrupthhb+0x60>
     2bc:	48 2b       	or	r20, r24
     2be:	40 83       	st	Z, r20
     2c0:	08 95       	ret

000002c2 <_Z14USART_Transmith>:
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	90 81       	ld	r25, Z
     2c8:	95 ff       	sbrs	r25, 5
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <_Z14USART_Transmith+0x4>
     2cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2d0:	08 95       	ret

000002d2 <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     2d2:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <time>
     2d6:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <time+0x1>
     2da:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <time+0x2>
     2de:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <time+0x3>
     2e2:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <time+0x4>
     2e6:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <time+0x5>
     2ea:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <time+0x6>
     2ee:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <time+0x7>
     2f2:	a1 e0       	ldi	r26, 0x01	; 1
     2f4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__adddi3_s8>
     2f8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <time>
     2fc:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <time+0x1>
     300:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <time+0x2>
     304:	50 93 06 01 	sts	0x0106, r21	; 0x800106 <time+0x3>
     308:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <time+0x4>
     30c:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <time+0x5>
     310:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <time+0x6>
     314:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <time+0x7>
	if(cdown != 0){
     318:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cdown>
     31c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <cdown+0x1>
     320:	89 2b       	or	r24, r25
     322:	49 f0       	breq	.+18     	; 0x336 <_Z13milliHappenedv+0x64>
		cdown -= 1;
     324:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cdown>
     328:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <cdown+0x1>
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <cdown+0x1>
     332:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cdown>
     336:	08 95       	ret

00000338 <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     338:	1f 92       	push	r1
     33a:	0f 92       	push	r0
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	0f 92       	push	r0
     340:	11 24       	eor	r1, r1
     342:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     344:	84 b7       	in	r24, 0x34	; 52
     346:	8e 7f       	andi	r24, 0xFE	; 254
     348:	84 bf       	out	0x34, r24	; 52
     34a:	8f 91       	pop	r24
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <_Z6NotifyPKc>:
		power *= 0x10;
	}
	return temp;
}

void Notify(const char* str){
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     35c:	8d e0       	ldi	r24, 0x0D	; 13
     35e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z14USART_Transmith>
	USART_Transmit('\n');
     362:	8a e0       	ldi	r24, 0x0A	; 10
     364:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z14USART_Transmith>
	while(pgm_read_byte(str) != 0){
     368:	fe 01       	movw	r30, r28
     36a:	84 91       	lpm	r24, Z
     36c:	88 23       	and	r24, r24
     36e:	49 f0       	breq	.+18     	; 0x382 <_Z6NotifyPKc+0x2c>
		USART_Transmit(pgm_read_byte(str));
     370:	fe 01       	movw	r30, r28
     372:	84 91       	lpm	r24, Z
     374:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z14USART_Transmith>
		str += 1;
     378:	21 96       	adiw	r28, 0x01	; 1
}

void Notify(const char* str){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(pgm_read_byte(str) != 0){
     37a:	fe 01       	movw	r30, r28
     37c:	84 91       	lpm	r24, Z
     37e:	81 11       	cpse	r24, r1
     380:	f7 cf       	rjmp	.-18     	; 0x370 <_Z6NotifyPKc+0x1a>
		USART_Transmit(pgm_read_byte(str));
		str += 1;
	}
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <_ZN8NRF24L0114toggleActivateEv>:
			#endif
		}
		return Speed;
	}
	return Speed;
}
     388:	41 98       	cbi	0x08, 1	; 8
     38a:	80 e5       	ldi	r24, 0x50	; 80
     38c:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
     390:	83 e7       	ldi	r24, 0x73	; 115
     392:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
     396:	41 9a       	sbi	0x08, 1	; 8
     398:	08 95       	ret

0000039a <_ZN8NRF24L0114sendSPICommandEh>:
     39a:	86 2f       	mov	r24, r22
     39c:	41 98       	cbi	0x08, 1	; 8
     39e:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
     3a2:	41 9a       	sbi	0x08, 1	; 8
     3a4:	08 95       	ret

000003a6 <_ZN8NRF24L0115readSPIRegisterEhh>:
     3a6:	af 92       	push	r10
     3a8:	bf 92       	push	r11
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	86 2f       	mov	r24, r22
     3bc:	a4 2e       	mov	r10, r20
     3be:	41 98       	cbi	0x08, 1	; 8
     3c0:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
     3c4:	aa 20       	and	r10, r10
     3c6:	21 f1       	breq	.+72     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3c8:	d0 e0       	ldi	r29, 0x00	; 0
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
     3cc:	b1 2c       	mov	r11, r1
     3ce:	c1 2c       	mov	r12, r1
     3d0:	d1 2c       	mov	r13, r1
     3d2:	e1 2c       	mov	r14, r1
     3d4:	f1 2c       	mov	r15, r1
     3d6:	00 e0       	ldi	r16, 0x00	; 0
     3d8:	10 e0       	ldi	r17, 0x00	; 0
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
     3e0:	2c 2f       	mov	r18, r28
     3e2:	28 2b       	or	r18, r24
     3e4:	3b 2d       	mov	r19, r11
     3e6:	4c 2d       	mov	r20, r12
     3e8:	5d 2d       	mov	r21, r13
     3ea:	6e 2d       	mov	r22, r14
     3ec:	7f 2d       	mov	r23, r15
     3ee:	80 2f       	mov	r24, r16
     3f0:	91 2f       	mov	r25, r17
     3f2:	08 e0       	ldi	r16, 0x08	; 8
     3f4:	0e 94 1e 0a 	call	0x143c	; 0x143c <__ashldi3>
     3f8:	c2 2f       	mov	r28, r18
     3fa:	b3 2e       	mov	r11, r19
     3fc:	c4 2e       	mov	r12, r20
     3fe:	d5 2e       	mov	r13, r21
     400:	e6 2e       	mov	r14, r22
     402:	f7 2e       	mov	r15, r23
     404:	08 2f       	mov	r16, r24
     406:	19 2f       	mov	r17, r25
     408:	df 5f       	subi	r29, 0xFF	; 255
     40a:	da 11       	cpse	r29, r10
     40c:	e6 cf       	rjmp	.-52     	; 0x3da <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     40e:	08 c0       	rjmp	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     410:	c0 e0       	ldi	r28, 0x00	; 0
     412:	b1 2c       	mov	r11, r1
     414:	c1 2c       	mov	r12, r1
     416:	d1 2c       	mov	r13, r1
     418:	e1 2c       	mov	r14, r1
     41a:	f1 2c       	mov	r15, r1
     41c:	00 e0       	ldi	r16, 0x00	; 0
     41e:	10 e0       	ldi	r17, 0x00	; 0
     420:	41 9a       	sbi	0x08, 1	; 8
     422:	2c 2f       	mov	r18, r28
     424:	3b 2d       	mov	r19, r11
     426:	4c 2d       	mov	r20, r12
     428:	5d 2d       	mov	r21, r13
     42a:	6e 2d       	mov	r22, r14
     42c:	7f 2d       	mov	r23, r15
     42e:	80 2f       	mov	r24, r16
     430:	91 2f       	mov	r25, r17
     432:	08 e0       	ldi	r16, 0x08	; 8
     434:	0e 94 39 0a 	call	0x1472	; 0x1472 <__lshrdi3>
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	08 95       	ret

0000044e <_ZN8NRF24L018isTXFullEv>:
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	67 e1       	ldi	r22, 0x17	; 23
     452:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     456:	82 2f       	mov	r24, r18
     458:	80 72       	andi	r24, 0x20	; 32
     45a:	08 95       	ret

0000045c <_ZN8NRF24L0111isTX_DS_SetEv>:
     45c:	41 e0       	ldi	r20, 0x01	; 1
     45e:	67 e0       	ldi	r22, 0x07	; 7
     460:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     464:	82 2f       	mov	r24, r18
     466:	80 72       	andi	r24, 0x20	; 32
     468:	08 95       	ret

0000046a <_ZN8NRF24L0112isRT_Max_SetEv>:
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	67 e0       	ldi	r22, 0x07	; 7
     46e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     472:	82 2f       	mov	r24, r18
     474:	80 71       	andi	r24, 0x10	; 16
     476:	08 95       	ret

00000478 <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     478:	9f 92       	push	r9
     47a:	af 92       	push	r10
     47c:	bf 92       	push	r11
     47e:	cf 92       	push	r12
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	c2 2f       	mov	r28, r18
     490:	d3 2f       	mov	r29, r19
     492:	b4 2e       	mov	r11, r20
     494:	a5 2e       	mov	r10, r21
     496:	41 98       	cbi	0x08, 1	; 8
     498:	86 2f       	mov	r24, r22
     49a:	80 62       	ori	r24, 0x20	; 32
     49c:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
     4a0:	98 2e       	mov	r9, r24
     4a2:	cc 20       	and	r12, r12
     4a4:	d1 f0       	breq	.+52     	; 0x4da <_ZN8NRF24L0116writeSPIRegisterEhyh+0x62>
     4a6:	d1 2c       	mov	r13, r1
     4a8:	8e 2d       	mov	r24, r14
     4aa:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
     4ae:	2e 2d       	mov	r18, r14
     4b0:	3f 2d       	mov	r19, r15
     4b2:	40 2f       	mov	r20, r16
     4b4:	51 2f       	mov	r21, r17
     4b6:	6c 2f       	mov	r22, r28
     4b8:	7d 2f       	mov	r23, r29
     4ba:	8b 2d       	mov	r24, r11
     4bc:	9a 2d       	mov	r25, r10
     4be:	08 e0       	ldi	r16, 0x08	; 8
     4c0:	0e 94 39 0a 	call	0x1472	; 0x1472 <__lshrdi3>
     4c4:	e2 2e       	mov	r14, r18
     4c6:	f3 2e       	mov	r15, r19
     4c8:	04 2f       	mov	r16, r20
     4ca:	15 2f       	mov	r17, r21
     4cc:	c6 2f       	mov	r28, r22
     4ce:	d7 2f       	mov	r29, r23
     4d0:	b8 2e       	mov	r11, r24
     4d2:	a9 2e       	mov	r10, r25
     4d4:	d3 94       	inc	r13
     4d6:	dc 10       	cpse	r13, r12
     4d8:	e7 cf       	rjmp	.-50     	; 0x4a8 <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     4da:	41 9a       	sbi	0x08, 1	; 8
     4dc:	89 2d       	mov	r24, r9
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	bf 90       	pop	r11
     4f0:	af 90       	pop	r10
     4f2:	9f 90       	pop	r9
     4f4:	08 95       	ret

000004f6 <_ZN8NRF24L017powerONEb>:
     4f6:	cf 92       	push	r12
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
     506:	e6 2e       	mov	r14, r22
     508:	41 e0       	ldi	r20, 0x01	; 1
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     510:	2d 7f       	andi	r18, 0xFD	; 253
     512:	ee 0c       	add	r14, r14
     514:	e2 2a       	or	r14, r18
     516:	eb 82       	std	Y+3, r14	; 0x03
     518:	cc 24       	eor	r12, r12
     51a:	c3 94       	inc	r12
     51c:	f1 2c       	mov	r15, r1
     51e:	00 e0       	ldi	r16, 0x00	; 0
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	ce 01       	movw	r24, r28
     52e:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	cf 90       	pop	r12
     540:	08 95       	ret

00000542 <_ZN8NRF24L018testChipEv>:
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ec 01       	movw	r28, r24
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     55c:	dd 24       	eor	r13, r13
     55e:	d3 94       	inc	r13
     560:	e2 2e       	mov	r14, r18
     562:	ed 24       	eor	r14, r13
     564:	eb 82       	std	Y+3, r14	; 0x03
     566:	cc 24       	eor	r12, r12
     568:	c3 94       	inc	r12
     56a:	f1 2c       	mov	r15, r1
     56c:	00 e0       	ldi	r16, 0x00	; 0
     56e:	10 e0       	ldi	r17, 0x00	; 0
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	ce 01       	movw	r24, r28
     586:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     58a:	eb 80       	ldd	r14, Y+3	; 0x03
     58c:	ed 24       	eor	r14, r13
     58e:	eb 82       	std	Y+3, r14	; 0x03
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	ce 01       	movw	r24, r28
     59c:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	08 95       	ret

000005b2 <_ZN8NRF24L017setModeEb>:
     5b2:	cf 92       	push	r12
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
     5c2:	16 2f       	mov	r17, r22
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     5cc:	2e 7f       	andi	r18, 0xFE	; 254
     5ce:	e2 2e       	mov	r14, r18
     5d0:	e1 2a       	or	r14, r17
     5d2:	eb 82       	std	Y+3, r14	; 0x03
     5d4:	cc 24       	eor	r12, r12
     5d6:	c3 94       	inc	r12
     5d8:	f1 2c       	mov	r15, r1
     5da:	00 e0       	ldi	r16, 0x00	; 0
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	ce 01       	movw	r24, r28
     5ea:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	ce 01       	movw	r24, r28
     5f4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	cf 90       	pop	r12
     606:	08 95       	ret

00000608 <_ZN8NRF24L0120enableACKWithPayloadEb>:
     608:	cf 92       	push	r12
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	ec 01       	movw	r28, r24
     618:	e6 2e       	mov	r14, r22
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	6d e1       	ldi	r22, 0x1D	; 29
     61e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     622:	2d 7f       	andi	r18, 0xFD	; 253
     624:	ee 0c       	add	r14, r14
     626:	e2 2a       	or	r14, r18
     628:	eb 82       	std	Y+3, r14	; 0x03
     62a:	cc 24       	eor	r12, r12
     62c:	c3 94       	inc	r12
     62e:	f1 2c       	mov	r15, r1
     630:	00 e0       	ldi	r16, 0x00	; 0
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	6d e1       	ldi	r22, 0x1D	; 29
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	cf 90       	pop	r12
     652:	08 95       	ret

00000654 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     654:	cf 92       	push	r12
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24
     664:	e6 2e       	mov	r14, r22
     666:	41 e0       	ldi	r20, 0x01	; 1
     668:	6d e1       	ldi	r22, 0x1D	; 29
     66a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     66e:	2b 7f       	andi	r18, 0xFB	; 251
     670:	ee 0c       	add	r14, r14
     672:	ee 0c       	add	r14, r14
     674:	e2 2a       	or	r14, r18
     676:	eb 82       	std	Y+3, r14	; 0x03
     678:	cc 24       	eor	r12, r12
     67a:	c3 94       	inc	r12
     67c:	f1 2c       	mov	r15, r1
     67e:	00 e0       	ldi	r16, 0x00	; 0
     680:	10 e0       	ldi	r17, 0x00	; 0
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	6d e1       	ldi	r22, 0x1D	; 29
     68c:	ce 01       	movw	r24, r28
     68e:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	cf 90       	pop	r12
     6a0:	08 95       	ret

000006a2 <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	66 30       	cpi	r22, 0x06	; 6
     6b6:	48 f5       	brcc	.+82     	; 0x70a <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     6b8:	c4 2f       	mov	r28, r20
     6ba:	d6 2f       	mov	r29, r22
     6bc:	5c 01       	movw	r10, r24
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	6c e1       	ldi	r22, 0x1C	; 28
     6c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0d 2e       	mov	r0, r29
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	0a 94       	dec	r0
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     6d6:	80 95       	com	r24
     6d8:	82 23       	and	r24, r18
     6da:	4c 2f       	mov	r20, r28
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     6e0:	44 0f       	add	r20, r20
     6e2:	55 1f       	adc	r21, r21
     6e4:	da 95       	dec	r29
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     6e8:	e8 2e       	mov	r14, r24
     6ea:	e4 2a       	or	r14, r20
     6ec:	f5 01       	movw	r30, r10
     6ee:	e3 82       	std	Z+3, r14	; 0x03
     6f0:	cc 24       	eor	r12, r12
     6f2:	c3 94       	inc	r12
     6f4:	f1 2c       	mov	r15, r1
     6f6:	00 e0       	ldi	r16, 0x00	; 0
     6f8:	10 e0       	ldi	r17, 0x00	; 0
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	6c e1       	ldi	r22, 0x1C	; 28
     704:	c5 01       	movw	r24, r10
     706:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	cf 90       	pop	r12
     718:	bf 90       	pop	r11
     71a:	af 90       	pop	r10
     71c:	08 95       	ret

0000071e <_ZN8NRF24L0110clearTX_DSEv>:
     71e:	cf 92       	push	r12
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cc 24       	eor	r12, r12
     72a:	c3 94       	inc	r12
     72c:	68 94       	set
     72e:	ee 24       	eor	r14, r14
     730:	e5 f8       	bld	r14, 5
     732:	f1 2c       	mov	r15, r1
     734:	00 e0       	ldi	r16, 0x00	; 0
     736:	10 e0       	ldi	r17, 0x00	; 0
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	67 e0       	ldi	r22, 0x07	; 7
     742:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	cf 90       	pop	r12
     750:	08 95       	ret

00000752 <_ZN8NRF24L0111clearRT_MaxEv>:
     752:	cf 92       	push	r12
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cc 24       	eor	r12, r12
     75e:	c3 94       	inc	r12
     760:	68 94       	set
     762:	ee 24       	eor	r14, r14
     764:	e4 f8       	bld	r14, 4
     766:	f1 2c       	mov	r15, r1
     768:	00 e0       	ldi	r16, 0x00	; 0
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	67 e0       	ldi	r22, 0x07	; 7
     776:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	cf 90       	pop	r12
     784:	08 95       	ret

00000786 <_ZN8NRF24L0113setRFDataRateEb>:
     786:	cf 92       	push	r12
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	ec 01       	movw	r28, r24
     796:	e6 2e       	mov	r14, r22
     798:	41 e0       	ldi	r20, 0x01	; 1
     79a:	66 e0       	ldi	r22, 0x06	; 6
     79c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8NRF24L0115readSPIRegisterEhh>
     7a0:	27 7f       	andi	r18, 0xF7	; 247
     7a2:	ee 0c       	add	r14, r14
     7a4:	ee 0c       	add	r14, r14
     7a6:	ee 0c       	add	r14, r14
     7a8:	e2 2a       	or	r14, r18
     7aa:	eb 82       	std	Y+3, r14	; 0x03
     7ac:	cc 24       	eor	r12, r12
     7ae:	c3 94       	inc	r12
     7b0:	f1 2c       	mov	r15, r1
     7b2:	00 e0       	ldi	r16, 0x00	; 0
     7b4:	10 e0       	ldi	r17, 0x00	; 0
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	66 e0       	ldi	r22, 0x06	; 6
     7c0:	ce 01       	movw	r24, r28
     7c2:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	cf 90       	pop	r12
     7d4:	08 95       	ret

000007d6 <_ZN8NRF24L0110initializeEv>:
     7d6:	cf 92       	push	r12
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ec 01       	movw	r28, r24
     7e6:	39 9a       	sbi	0x07, 1	; 7
     7e8:	38 9a       	sbi	0x07, 0	; 7
     7ea:	40 9a       	sbi	0x08, 0	; 8
     7ec:	57 9a       	sbi	0x0a, 7	; 10
     7ee:	1a 82       	std	Y+2, r1	; 0x02
     7f0:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN8NRF24L018testChipEv>
     7f4:	cc 24       	eor	r12, r12
     7f6:	c3 94       	inc	r12
     7f8:	e1 2c       	mov	r14, r1
     7fa:	f1 2c       	mov	r15, r1
     7fc:	00 e0       	ldi	r16, 0x00	; 0
     7fe:	10 e0       	ldi	r17, 0x00	; 0
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	64 e0       	ldi	r22, 0x04	; 4
     80a:	ce 01       	movw	r24, r28
     80c:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	ce 01       	movw	r24, r28
     814:	0e 94 c3 03 	call	0x786	; 0x786 <_ZN8NRF24L0113setRFDataRateEb>
     818:	6f 81       	ldd	r22, Y+7	; 0x07
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN8NRF24L017setModeEb>
     820:	88 85       	ldd	r24, Y+8	; 0x08
     822:	88 23       	and	r24, r24
     824:	81 f0       	breq	.+32     	; 0x846 <_ZN8NRF24L0110initializeEv+0x70>
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	ce 01       	movw	r24, r28
     82c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN8NRF24L0118enableDPLForRXPipeEhb>
     830:	ce 01       	movw	r24, r28
     832:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN8NRF24L0114toggleActivateEv>
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	ce 01       	movw	r24, r28
     842:	0e 94 04 03 	call	0x608	; 0x608 <_ZN8NRF24L0120enableACKWithPayloadEb>
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	ce 01       	movw	r24, r28
     84a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN8NRF24L017powerONEb>
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	cf 90       	pop	r12
     85c:	08 95       	ret

0000085e <_ZN8NRF24L01C1Ehhb>:
     85e:	3f ef       	ldi	r19, 0xFF	; 255
     860:	50 e7       	ldi	r21, 0x70	; 112
     862:	72 e0       	ldi	r23, 0x02	; 2
     864:	31 50       	subi	r19, 0x01	; 1
     866:	50 40       	sbci	r21, 0x00	; 0
     868:	70 40       	sbci	r23, 0x00	; 0
     86a:	e1 f7       	brne	.-8      	; 0x864 <_ZN8NRF24L01C1Ehhb+0x6>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <_ZN8NRF24L01C1Ehhb+0x10>
     86e:	00 00       	nop
     870:	fc 01       	movw	r30, r24
     872:	27 83       	std	Z+7, r18	; 0x07
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	20 87       	std	Z+8, r18	; 0x08
     878:	60 83       	st	Z, r22
     87a:	41 83       	std	Z+1, r20	; 0x01
     87c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN8NRF24L0110initializeEv>
     880:	08 95       	ret

00000882 <_ZN8NRF24L0119fastTransferPayloadEh>:

void NRF24L01::fastTransferPayload(volatile uint8_t data){
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	5c 01       	movw	r10, r24
     89c:	69 83       	std	Y+1, r22	; 0x01
	static uint8_t status;
	status = sendSPICommand(0xFF);
     89e:	6f ef       	ldi	r22, 0xFF	; 255
     8a0:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN8NRF24L0114sendSPICommandEh>
     8a4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZN8NRF24L0119fastTransferPayloadEhE6status>
	if(!(status & 0x01)){
     8a8:	80 fd       	sbrc	r24, 0
     8aa:	09 c0       	rjmp	.+18     	; 0x8be <_ZN8NRF24L0119fastTransferPayloadEh+0x3c>
		CSN = 0;
     8ac:	41 98       	cbi	0x08, 1	; 8
		SPI_MasterTransmit(0xA0);
     8ae:	80 ea       	ldi	r24, 0xA0	; 160
     8b0:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
		SPI_MasterTransmit(data);
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z18SPI_MasterTransmitc>
		CSN = 1;
     8ba:	41 9a       	sbi	0x08, 1	; 8
		return;
     8bc:	12 c0       	rjmp	.+36     	; 0x8e2 <_ZN8NRF24L0119fastTransferPayloadEh+0x60>
	}
	if(status & 0x10)
     8be:	84 ff       	sbrs	r24, 4
     8c0:	10 c0       	rjmp	.+32     	; 0x8e2 <_ZN8NRF24L0119fastTransferPayloadEh+0x60>
	writeSPIRegister(0x07,0x10,1);
     8c2:	cc 24       	eor	r12, r12
     8c4:	c3 94       	inc	r12
     8c6:	68 94       	set
     8c8:	ee 24       	eor	r14, r14
     8ca:	e4 f8       	bld	r14, 4
     8cc:	f1 2c       	mov	r15, r1
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	67 e0       	ldi	r22, 0x07	; 7
     8dc:	c5 01       	movw	r24, r10
     8de:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
}
     8e2:	0f 90       	pop	r0
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	08 95       	ret

000008f8 <_ZN8NRF24L0118setTransmitAddressEy>:
	}
	CSN = 1;
	return status;
}

void NRF24L01::setTransmitAddress(uint64_t address){
     8f8:	cf 92       	push	r12
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
	writeSPIRegister(TX_ADDR, address, 5);
     902:	0f 2e       	mov	r0, r31
     904:	f5 e0       	ldi	r31, 0x05	; 5
     906:	cf 2e       	mov	r12, r31
     908:	f0 2d       	mov	r31, r0
     90a:	e0 2e       	mov	r14, r16
     90c:	f1 2e       	mov	r15, r17
     90e:	02 2f       	mov	r16, r18
     910:	13 2f       	mov	r17, r19
     912:	24 2f       	mov	r18, r20
     914:	35 2f       	mov	r19, r21
     916:	46 2f       	mov	r20, r22
     918:	57 2f       	mov	r21, r23
     91a:	60 e1       	ldi	r22, 0x10	; 16
     91c:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
}
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	cf 90       	pop	r12
     92a:	08 95       	ret

0000092c <_ZN8NRF24L0117setReceiveAddressEyh>:

void NRF24L01::setReceiveAddress(uint64_t address, uint8_t pipe){
     92c:	cf 92       	push	r12
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	f2 2f       	mov	r31, r18
     938:	24 2f       	mov	r18, r20
     93a:	46 2f       	mov	r20, r22
	writeSPIRegister(RX_ADDR_P0 + pipe, address, 5);
     93c:	6a e0       	ldi	r22, 0x0A	; 10
     93e:	6e 0d       	add	r22, r14
     940:	0f 2e       	mov	r0, r31
     942:	f5 e0       	ldi	r31, 0x05	; 5
     944:	cf 2e       	mov	r12, r31
     946:	f0 2d       	mov	r31, r0
     948:	e0 2e       	mov	r14, r16
     94a:	f1 2e       	mov	r15, r17
     94c:	0f 2f       	mov	r16, r31
     94e:	13 2f       	mov	r17, r19
     950:	35 2f       	mov	r19, r21
     952:	57 2f       	mov	r21, r23
     954:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN8NRF24L0116writeSPIRegisterEhyh>
}
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	cf 90       	pop	r12
     962:	08 95       	ret

00000964 <_ZN8NRF24L017flushTXEv>:

void NRF24L01::flushTX(){
	sendSPICommand(FLUSH_TX);
     964:	61 ee       	ldi	r22, 0xE1	; 225
     966:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN8NRF24L0114sendSPICommandEh>
     96a:	08 95       	ret

0000096c <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     96c:	08 95       	ret

0000096e <_ZN11SwitchClass5beginEv>:
     96e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <_ZN11SwitchClass1iE>
     972:	86 eb       	ldi	r24, 0xB6	; 182
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     97a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZN11SwitchClass17PinStateChangePtrE>
     97e:	08 95       	ret

00000980 <_ZN11SwitchClass10shortPressEPFvhE>:
     980:	fc 01       	movw	r30, r24
     982:	77 87       	std	Z+15, r23	; 0x0f
     984:	66 87       	std	Z+14, r22	; 0x0e
     986:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     98a:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <_ZN11SwitchClass16AllShortPressPtrE>
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	24 8f       	std	Z+28, r18	; 0x1c
     992:	08 95       	ret

00000994 <_ZN11SwitchClass18doubleWaitCompleteEv>:
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ec 01       	movw	r28, r24
     99a:	1d a2       	std	Y+37, r1	; 0x25
     99c:	1e a2       	std	Y+38, r1	; 0x26
     99e:	0e 94 2b 08 	call	0x1056	; 0x1056 <_ZN10TimerClass10resetTimerEv>
     9a2:	ce 01       	movw	r24, r28
     9a4:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN10TimerClass18resetCallbackTimerEv>
     9a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9aa:	81 11       	cpse	r24, r1
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     9ae:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZN11SwitchClass11AllShort_ENE>
     9b2:	88 23       	and	r24, r24
     9b4:	c9 f0       	breq	.+50     	; 0x9e8 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     9b6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZN11SwitchClass13AllSamePtr_ENE>
     9ba:	88 23       	and	r24, r24
     9bc:	61 f0       	breq	.+24     	; 0x9d6 <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
     9c4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <_ZN11SwitchClass16AllShortPressPtrE>
     9c8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     9cc:	30 97       	sbiw	r30, 0x00	; 0
     9ce:	61 f0       	breq	.+24     	; 0x9e8 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     9d0:	88 a5       	ldd	r24, Y+40	; 0x28
     9d2:	09 95       	icall
     9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
     9dc:	ee 85       	ldd	r30, Y+14	; 0x0e
     9de:	ff 85       	ldd	r31, Y+15	; 0x0f
     9e0:	30 97       	sbiw	r30, 0x00	; 0
     9e2:	11 f0       	breq	.+4      	; 0x9e8 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     9e4:	88 a5       	ldd	r24, Y+40	; 0x28
     9e6:	09 95       	icall
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <_ZN11SwitchClass17callAllDoubleWaitEh>:
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_ZN11SwitchClass1iE>
     9f6:	99 23       	and	r25, r25
     9f8:	c1 f0       	breq	.+48     	; 0xa2a <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     9fa:	d8 2f       	mov	r29, r24
     9fc:	c0 e0       	ldi	r28, 0x00	; 0
     9fe:	ec 2f       	mov	r30, r28
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	ee 5d       	subi	r30, 0xDE	; 222
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	01 90       	ld	r0, Z+
     a0c:	f0 81       	ld	r31, Z
     a0e:	e0 2d       	mov	r30, r0
     a10:	93 a5       	ldd	r25, Z+43	; 0x2b
     a12:	9d 13       	cpse	r25, r29
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     a16:	30 97       	sbiw	r30, 0x00	; 0
     a18:	19 f0       	breq	.+6      	; 0xa20 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     a1a:	cf 01       	movw	r24, r30
     a1c:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN11SwitchClass18doubleWaitCompleteEv>
     a20:	cf 5f       	subi	r28, 0xFF	; 255
     a22:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_ZN11SwitchClass1iE>
     a26:	c9 17       	cp	r28, r25
     a28:	50 f3       	brcs	.-44     	; 0x9fe <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <_ZN11SwitchClass17enableSamePtrModeEb>:
     a30:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZN11SwitchClass13AllSamePtr_ENE>
     a34:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZN11SwitchClass11AllShort_ENE>
     a38:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZN11SwitchClass12AllDouble_ENE>
     a3c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZN11SwitchClass10AllLong_ENE>
     a40:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ZN11SwitchClass20AllContinuousLong_ENE>
     a44:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZN11SwitchClass17AllFallingEdge_ENE>
     a48:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_ZN11SwitchClass16AllRisingEdge_ENE>
     a4c:	08 95       	ret

00000a4e <_ZN11SwitchClass16updatePinBuffersEv>:
     a4e:	83 b1       	in	r24, 0x03	; 3
     a50:	ed e1       	ldi	r30, 0x1D	; 29
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	80 83       	st	Z, r24
     a56:	86 b1       	in	r24, 0x06	; 6
     a58:	81 83       	std	Z+1, r24	; 0x01
     a5a:	89 b1       	in	r24, 0x09	; 9
     a5c:	82 83       	std	Z+2, r24	; 0x02
     a5e:	08 95       	ret

00000a60 <_ZN11SwitchClass10pollSwitchEv>:
     a60:	fc 01       	movw	r30, r24
     a62:	82 a5       	ldd	r24, Z+42	; 0x2a
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	49 f0       	breq	.+18     	; 0xa7a <_ZN11SwitchClass10pollSwitchEv+0x1a>
     a68:	18 f0       	brcs	.+6      	; 0xa70 <_ZN11SwitchClass10pollSwitchEv+0x10>
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	59 f0       	breq	.+22     	; 0xa84 <_ZN11SwitchClass10pollSwitchEv+0x24>
     a6e:	0e c0       	rjmp	.+28     	; 0xa8c <_ZN11SwitchClass10pollSwitchEv+0x2c>
     a70:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN11SwitchClass9PinBufferE>
     a74:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZN11SwitchClass11SwitchStateE>
     a78:	09 c0       	rjmp	.+18     	; 0xa8c <_ZN11SwitchClass10pollSwitchEv+0x2c>
     a7a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZN11SwitchClass9PinBufferE+0x1>
     a7e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZN11SwitchClass11SwitchStateE>
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <_ZN11SwitchClass10pollSwitchEv+0x2c>
     a84:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZN11SwitchClass9PinBufferE+0x2>
     a88:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZN11SwitchClass11SwitchStateE>
     a8c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a8e:	83 a3       	std	Z+35, r24	; 0x23
     a90:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <_ZN11SwitchClass11SwitchStateE>
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	01 a4       	ldd	r0, Z+41	; 0x29
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <_ZN11SwitchClass10pollSwitchEv+0x3e>
     a9a:	35 95       	asr	r19
     a9c:	27 95       	ror	r18
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <_ZN11SwitchClass10pollSwitchEv+0x3a>
     aa2:	21 70       	andi	r18, 0x01	; 1
     aa4:	22 8f       	std	Z+26, r18	; 0x1a
     aa6:	08 95       	ret

00000aa8 <_ZN11SwitchClass16initializeSwitchEhhPS_>:
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
     ab6:	f6 2e       	mov	r15, r22
     ab8:	e4 2e       	mov	r14, r20
     aba:	89 01       	movw	r16, r18
     abc:	1f 86       	std	Y+15, r1	; 0x0f
     abe:	1e 86       	std	Y+14, r1	; 0x0e
     ac0:	1b 8a       	std	Y+19, r1	; 0x13
     ac2:	1a 8a       	std	Y+18, r1	; 0x12
     ac4:	19 8a       	std	Y+17, r1	; 0x11
     ac6:	18 8a       	std	Y+16, r1	; 0x10
     ac8:	1d 8a       	std	Y+21, r1	; 0x15
     aca:	1c 8a       	std	Y+20, r1	; 0x14
     acc:	1f 8a       	std	Y+23, r1	; 0x17
     ace:	1e 8a       	std	Y+22, r1	; 0x16
     ad0:	19 8e       	std	Y+25, r1	; 0x19
     ad2:	18 8e       	std	Y+24, r1	; 0x18
     ad4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN10TimerClass15initializeTimerEv>
     ad8:	e9 a6       	std	Y+41, r14	; 0x29
     ada:	fa a6       	std	Y+42, r15	; 0x2a
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	6e 2d       	mov	r22, r14
     ae0:	8f 2d       	mov	r24, r15
     ae2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z15setPinDirectionhhb>
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	69 a5       	ldd	r22, Y+41	; 0x29
     aea:	8a a5       	ldd	r24, Y+42	; 0x2a
     aec:	0e 94 88 00 	call	0x110	; 0x110 <_Z11setPinStatehhb>
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	6e 2d       	mov	r22, r14
     af4:	8f 2d       	mov	r24, r15
     af6:	0e 94 2a 01 	call	0x254	; 0x254 <_Z21setPinChangeInterrupthhb>
     afa:	8a a5       	ldd	r24, Y+42	; 0x2a
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	41 f0       	breq	.+16     	; 0xb10 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x68>
     b00:	18 f0       	brcs	.+6      	; 0xb08 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x60>
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	49 f0       	breq	.+18     	; 0xb18 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x70>
     b06:	0b c0       	rjmp	.+22     	; 0xb1e <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     b08:	83 b1       	in	r24, 0x03	; 3
     b0a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZN11SwitchClass11SwitchStateE>
     b0e:	07 c0       	rjmp	.+14     	; 0xb1e <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     b10:	86 b1       	in	r24, 0x06	; 6
     b12:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZN11SwitchClass11SwitchStateE>
     b16:	03 c0       	rjmp	.+6      	; 0xb1e <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     b18:	89 b1       	in	r24, 0x09	; 9
     b1a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZN11SwitchClass11SwitchStateE>
     b1e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZN11SwitchClass1iE>
     b22:	e8 2f       	mov	r30, r24
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	ee 5d       	subi	r30, 0xDE	; 222
     b2c:	fe 4f       	sbci	r31, 0xFE	; 254
     b2e:	11 83       	std	Z+1, r17	; 0x01
     b30:	00 83       	st	Z, r16
     b32:	88 a7       	std	Y+40, r24	; 0x28
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZN11SwitchClass1iE>
     b3a:	ce 01       	movw	r24, r28
     b3c:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN11SwitchClass16updatePinBuffersEv>
     b40:	ce 01       	movw	r24, r28
     b42:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN11SwitchClass10pollSwitchEv>
     b46:	1f 8e       	std	Y+31, r1	; 0x1f
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <_ZN10TimerClass10getTimerIDEv>
     b4e:	8b a7       	std	Y+43, r24	; 0x2b
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	08 95       	ret

00000b5e <_ZN11SwitchClass18processStateChangeEv>:
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	ec 01       	movw	r28, r24
     b64:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN11SwitchClass10pollSwitchEv>
     b68:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b6a:	81 11       	cpse	r24, r1
     b6c:	29 c0       	rjmp	.+82     	; 0xbc0 <_ZN11SwitchClass18processStateChangeEv+0x62>
     b6e:	8b a1       	ldd	r24, Y+35	; 0x23
     b70:	88 23       	and	r24, r24
     b72:	09 f4       	brne	.+2      	; 0xb76 <_ZN11SwitchClass18processStateChangeEv+0x18>
     b74:	8a c0       	rjmp	.+276    	; 0xc8a <_ZN11SwitchClass18processStateChangeEv+0x12c>
     b76:	89 a1       	ldd	r24, Y+33	; 0x21
     b78:	88 23       	and	r24, r24
     b7a:	31 f0       	breq	.+12     	; 0xb88 <_ZN11SwitchClass18processStateChangeEv+0x2a>
     b7c:	e8 8d       	ldd	r30, Y+24	; 0x18
     b7e:	f9 8d       	ldd	r31, Y+25	; 0x19
     b80:	30 97       	sbiw	r30, 0x00	; 0
     b82:	11 f0       	breq	.+4      	; 0xb88 <_ZN11SwitchClass18processStateChangeEv+0x2a>
     b84:	88 a5       	ldd	r24, Y+40	; 0x28
     b86:	09 95       	icall
     b88:	8d a1       	ldd	r24, Y+37	; 0x25
     b8a:	81 11       	cpse	r24, r1
     b8c:	08 c0       	rjmp	.+16     	; 0xb9e <_ZN11SwitchClass18processStateChangeEv+0x40>
     b8e:	25 ed       	ldi	r18, 0xD5	; 213
     b90:	36 e0       	ldi	r19, 0x06	; 6
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	6c eb       	ldi	r22, 0xBC	; 188
     b96:	72 e0       	ldi	r23, 0x02	; 2
     b98:	ce 01       	movw	r24, r28
     b9a:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	8c a3       	std	Y+36, r24	; 0x24
     ba2:	8d a1       	ldd	r24, Y+37	; 0x25
     ba4:	88 23       	and	r24, r24
     ba6:	41 f0       	breq	.+16     	; 0xbb8 <_ZN11SwitchClass18processStateChangeEv+0x5a>
     ba8:	68 e5       	ldi	r22, 0x58	; 88
     baa:	72 e0       	ldi	r23, 0x02	; 2
     bac:	ce 01       	movw	r24, r28
     bae:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN10TimerClass7setTimeEj>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	8e a3       	std	Y+38, r24	; 0x26
     bb6:	1d a2       	std	Y+37, r1	; 0x25
     bb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <_ZN11SwitchClass18processStateChangeEv+0x62>
     bbe:	65 c0       	rjmp	.+202    	; 0xc8a <_ZN11SwitchClass18processStateChangeEv+0x12c>
     bc0:	8b a1       	ldd	r24, Y+35	; 0x23
     bc2:	81 11       	cpse	r24, r1
     bc4:	62 c0       	rjmp	.+196    	; 0xc8a <_ZN11SwitchClass18processStateChangeEv+0x12c>
     bc6:	8a a1       	ldd	r24, Y+34	; 0x22
     bc8:	88 23       	and	r24, r24
     bca:	31 f0       	breq	.+12     	; 0xbd8 <_ZN11SwitchClass18processStateChangeEv+0x7a>
     bcc:	ee 89       	ldd	r30, Y+22	; 0x16
     bce:	ff 89       	ldd	r31, Y+23	; 0x17
     bd0:	30 97       	sbiw	r30, 0x00	; 0
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <_ZN11SwitchClass18processStateChangeEv+0x7a>
     bd4:	88 a5       	ldd	r24, Y+40	; 0x28
     bd6:	09 95       	icall
     bd8:	8e a1       	ldd	r24, Y+38	; 0x26
     bda:	81 11       	cpse	r24, r1
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <_ZN11SwitchClass18processStateChangeEv+0x8c>
     bde:	ce 01       	movw	r24, r28
     be0:	0e 94 10 08 	call	0x1020	; 0x1020 <_ZN10TimerClass15getCallBackTimeEv>
     be4:	9f a7       	std	Y+47, r25	; 0x2f
     be6:	8e a7       	std	Y+46, r24	; 0x2e
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <_ZN11SwitchClass18processStateChangeEv+0x96>
     bea:	ce 01       	movw	r24, r28
     bec:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN10TimerClass7getTimeEv>
     bf0:	9f a7       	std	Y+47, r25	; 0x2f
     bf2:	8e a7       	std	Y+46, r24	; 0x2e
     bf4:	ce 01       	movw	r24, r28
     bf6:	0e 94 2b 08 	call	0x1056	; 0x1056 <_ZN10TimerClass10resetTimerEv>
     bfa:	ce 01       	movw	r24, r28
     bfc:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN10TimerClass18resetCallbackTimerEv>
     c00:	1c a2       	std	Y+36, r1	; 0x24
     c02:	8e a5       	ldd	r24, Y+46	; 0x2e
     c04:	9f a5       	ldd	r25, Y+47	; 0x2f
     c06:	0b 97       	sbiw	r24, 0x0b	; 11
     c08:	8d 34       	cpi	r24, 0x4D	; 77
     c0a:	92 40       	sbci	r25, 0x02	; 2
     c0c:	98 f5       	brcc	.+102    	; 0xc74 <_ZN11SwitchClass18processStateChangeEv+0x116>
     c0e:	8e a1       	ldd	r24, Y+38	; 0x26
     c10:	81 11       	cpse	r24, r1
     c12:	17 c0       	rjmp	.+46     	; 0xc42 <_ZN11SwitchClass18processStateChangeEv+0xe4>
     c14:	8f a1       	ldd	r24, Y+39	; 0x27
     c16:	81 11       	cpse	r24, r1
     c18:	2f c0       	rjmp	.+94     	; 0xc78 <_ZN11SwitchClass18processStateChangeEv+0x11a>
     c1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c1c:	88 23       	and	r24, r24
     c1e:	59 f0       	breq	.+22     	; 0xc36 <_ZN11SwitchClass18processStateChangeEv+0xd8>
     c20:	27 ef       	ldi	r18, 0xF7	; 247
     c22:	34 e0       	ldi	r19, 0x04	; 4
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	64 e6       	ldi	r22, 0x64	; 100
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	ce 01       	movw	r24, r28
     c2c:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	8d a3       	std	Y+37, r24	; 0x25
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <_ZN11SwitchClass18processStateChangeEv+0xde>
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN11SwitchClass18doubleWaitCompleteEv>
     c3c:	8e a1       	ldd	r24, Y+38	; 0x26
     c3e:	88 23       	and	r24, r24
     c40:	09 f1       	breq	.+66     	; 0xc84 <_ZN11SwitchClass18processStateChangeEv+0x126>
     c42:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZN11SwitchClass13AllSamePtr_ENE>
     c46:	88 23       	and	r24, r24
     c48:	61 f0       	breq	.+24     	; 0xc62 <_ZN11SwitchClass18processStateChangeEv+0x104>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
     c50:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <_ZN11SwitchClass17AllDoublePressPtrE>
     c54:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
     c58:	30 97       	sbiw	r30, 0x00	; 0
     c5a:	61 f0       	breq	.+24     	; 0xc74 <_ZN11SwitchClass18processStateChangeEv+0x116>
     c5c:	88 a5       	ldd	r24, Y+40	; 0x28
     c5e:	09 95       	icall
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <_ZN11SwitchClass18processStateChangeEv+0x116>
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
     c68:	ea 89       	ldd	r30, Y+18	; 0x12
     c6a:	fb 89       	ldd	r31, Y+19	; 0x13
     c6c:	30 97       	sbiw	r30, 0x00	; 0
     c6e:	11 f0       	breq	.+4      	; 0xc74 <_ZN11SwitchClass18processStateChangeEv+0x116>
     c70:	88 a5       	ldd	r24, Y+40	; 0x28
     c72:	09 95       	icall
     c74:	8f a1       	ldd	r24, Y+39	; 0x27
     c76:	81 11       	cpse	r24, r1
     c78:	1f a2       	std	Y+39, r1	; 0x27
     c7a:	8e a1       	ldd	r24, Y+38	; 0x26
     c7c:	88 23       	and	r24, r24
     c7e:	29 f0       	breq	.+10     	; 0xc8a <_ZN11SwitchClass18processStateChangeEv+0x12c>
     c80:	1e a2       	std	Y+38, r1	; 0x26
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <_ZN11SwitchClass18processStateChangeEv+0x12c>
     c84:	8f a1       	ldd	r24, Y+39	; 0x27
     c86:	81 11       	cpse	r24, r1
     c88:	f7 cf       	rjmp	.-18     	; 0xc78 <_ZN11SwitchClass18processStateChangeEv+0x11a>
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <_ZN11SwitchClass25callAllProcessStateChangeEv>:
     c90:	cf 93       	push	r28
     c92:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZN11SwitchClass1iE>
     c96:	88 23       	and	r24, r24
     c98:	91 f0       	breq	.+36     	; 0xcbe <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
     c9a:	c0 e0       	ldi	r28, 0x00	; 0
     c9c:	ec 2f       	mov	r30, r28
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	ee 5d       	subi	r30, 0xDE	; 222
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	80 81       	ld	r24, Z
     caa:	91 81       	ldd	r25, Z+1	; 0x01
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	11 f0       	breq	.+4      	; 0xcb4 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
     cb0:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN11SwitchClass18processStateChangeEv>
     cb4:	cf 5f       	subi	r28, 0xFF	; 255
     cb6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZN11SwitchClass1iE>
     cba:	c8 17       	cp	r28, r24
     cbc:	78 f3       	brcs	.-34     	; 0xc9c <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <_ZN11SwitchClass16longWaitCompleteEv>:
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	ec 01       	movw	r28, r24
     cc8:	18 a2       	std	Y+32, r1	; 0x20
     cca:	1d a2       	std	Y+37, r1	; 0x25
     ccc:	1e a2       	std	Y+38, r1	; 0x26
     cce:	8f a1       	ldd	r24, Y+39	; 0x27
     cd0:	88 23       	and	r24, r24
     cd2:	89 f1       	breq	.+98     	; 0xd36 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     cd4:	ce 01       	movw	r24, r28
     cd6:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN11SwitchClass16updatePinBuffersEv>
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN11SwitchClass10pollSwitchEv>
     ce0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ce2:	81 11       	cpse	r24, r1
     ce4:	28 c0       	rjmp	.+80     	; 0xd36 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     ce6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ce8:	81 11       	cpse	r24, r1
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <_ZN11SwitchClass16longWaitCompleteEv+0x32>
     cec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZN11SwitchClass20AllContinuousLong_ENE>
     cf0:	88 23       	and	r24, r24
     cf2:	09 f1       	breq	.+66     	; 0xd36 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     cf4:	25 ed       	ldi	r18, 0xD5	; 213
     cf6:	36 e0       	ldi	r19, 0x06	; 6
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	66 e4       	ldi	r22, 0x46	; 70
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	ce 01       	movw	r24, r28
     d00:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     d04:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZN11SwitchClass13AllSamePtr_ENE>
     d08:	88 23       	and	r24, r24
     d0a:	61 f0       	breq	.+24     	; 0xd24 <_ZN11SwitchClass16longWaitCompleteEv+0x62>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
     d12:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <_ZN11SwitchClass25AllContinuousLongPressPtrE>
     d16:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
     d1a:	30 97       	sbiw	r30, 0x00	; 0
     d1c:	61 f0       	breq	.+24     	; 0xd36 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     d1e:	88 a5       	ldd	r24, Y+40	; 0x28
     d20:	09 95       	icall
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
     d2a:	ec 89       	ldd	r30, Y+20	; 0x14
     d2c:	fd 89       	ldd	r31, Y+21	; 0x15
     d2e:	30 97       	sbiw	r30, 0x00	; 0
     d30:	11 f0       	breq	.+4      	; 0xd36 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     d32:	88 a5       	ldd	r24, Y+40	; 0x28
     d34:	09 95       	icall
     d36:	8c a1       	ldd	r24, Y+36	; 0x24
     d38:	88 23       	and	r24, r24
     d3a:	a1 f1       	breq	.+104    	; 0xda4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     d3c:	ce 01       	movw	r24, r28
     d3e:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN11SwitchClass16updatePinBuffersEv>
     d42:	ce 01       	movw	r24, r28
     d44:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN11SwitchClass10pollSwitchEv>
     d48:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d4a:	81 11       	cpse	r24, r1
     d4c:	2b c0       	rjmp	.+86     	; 0xda4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d50:	81 11       	cpse	r24, r1
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
     d54:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZN11SwitchClass10AllLong_ENE>
     d58:	88 23       	and	r24, r24
     d5a:	21 f1       	breq	.+72     	; 0xda4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     d5c:	1c a2       	std	Y+36, r1	; 0x24
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8f a3       	std	Y+39, r24	; 0x27
     d62:	25 ed       	ldi	r18, 0xD5	; 213
     d64:	36 e0       	ldi	r19, 0x06	; 6
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	62 e3       	ldi	r22, 0x32	; 50
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	ce 01       	movw	r24, r28
     d6e:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     d72:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZN11SwitchClass13AllSamePtr_ENE>
     d76:	88 23       	and	r24, r24
     d78:	61 f0       	breq	.+24     	; 0xd92 <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
     d80:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <_ZN11SwitchClass15AllLongPressPtrE>
     d84:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <_ZN11SwitchClass15AllLongPressPtrE+0x1>
     d88:	30 97       	sbiw	r30, 0x00	; 0
     d8a:	61 f0       	breq	.+24     	; 0xda4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     d8c:	88 a5       	ldd	r24, Y+40	; 0x28
     d8e:	09 95       	icall
     d90:	09 c0       	rjmp	.+18     	; 0xda4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
     d98:	e8 89       	ldd	r30, Y+16	; 0x10
     d9a:	f9 89       	ldd	r31, Y+17	; 0x11
     d9c:	30 97       	sbiw	r30, 0x00	; 0
     d9e:	11 f0       	breq	.+4      	; 0xda4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     da0:	88 a5       	ldd	r24, Y+40	; 0x28
     da2:	09 95       	icall
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <_ZN11SwitchClass20callAllOjectLongWaitEh>:
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_ZN11SwitchClass1iE>
     db2:	99 23       	and	r25, r25
     db4:	c1 f0       	breq	.+48     	; 0xde6 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
     db6:	d8 2f       	mov	r29, r24
     db8:	c0 e0       	ldi	r28, 0x00	; 0
     dba:	ec 2f       	mov	r30, r28
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	ee 5d       	subi	r30, 0xDE	; 222
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	01 90       	ld	r0, Z+
     dc8:	f0 81       	ld	r31, Z
     dca:	e0 2d       	mov	r30, r0
     dcc:	93 a5       	ldd	r25, Z+43	; 0x2b
     dce:	9d 13       	cpse	r25, r29
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
     dd2:	30 97       	sbiw	r30, 0x00	; 0
     dd4:	19 f0       	breq	.+6      	; 0xddc <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
     dd6:	cf 01       	movw	r24, r30
     dd8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN11SwitchClass16longWaitCompleteEv>
     ddc:	cf 5f       	subi	r28, 0xFF	; 255
     dde:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_ZN11SwitchClass1iE>
     de2:	c9 17       	cp	r28, r25
     de4:	50 f3       	brcs	.-44     	; 0xdba <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <__vector_1>:
}

ISR(INT0_vect){
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
     e0e:	83 b1       	in	r24, 0x03	; 3
     e10:	ed e1       	ldi	r30, 0x1D	; 29
     e12:	f1 e0       	ldi	r31, 0x01	; 1
     e14:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
     e16:	86 b1       	in	r24, 0x06	; 6
     e18:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
     e1a:	89 b1       	in	r24, 0x09	; 9
     e1c:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
     e1e:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     e28:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_2>:

ISR(INT1_vect){
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	4f 93       	push	r20
     e5e:	5f 93       	push	r21
     e60:	6f 93       	push	r22
     e62:	7f 93       	push	r23
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
	wakeUp();
     e70:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     e7a:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_3>:

ISR(PCINT0_vect){
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	2f 93       	push	r18
     eac:	3f 93       	push	r19
     eae:	4f 93       	push	r20
     eb0:	5f 93       	push	r21
     eb2:	6f 93       	push	r22
     eb4:	7f 93       	push	r23
     eb6:	8f 93       	push	r24
     eb8:	9f 93       	push	r25
     eba:	af 93       	push	r26
     ebc:	bf 93       	push	r27
     ebe:	ef 93       	push	r30
     ec0:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_B);
	Switch.PinBuffer[0] = PINB;
     ec2:	83 b1       	in	r24, 0x03	; 3
     ec4:	ed e1       	ldi	r30, 0x1D	; 29
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
     eca:	86 b1       	in	r24, 0x06	; 6
     ecc:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
     ece:	89 b1       	in	r24, 0x09	; 9
     ed0:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
     ed2:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     edc:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	bf 91       	pop	r27
     ee6:	af 91       	pop	r26
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	7f 91       	pop	r23
     eee:	6f 91       	pop	r22
     ef0:	5f 91       	pop	r21
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_4>:

ISR(PCINT1_vect){
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_C);
	Switch.PinBuffer[0] = PINB;
     f24:	83 b1       	in	r24, 0x03	; 3
     f26:	ed e1       	ldi	r30, 0x1D	; 29
     f28:	f1 e0       	ldi	r31, 0x01	; 1
     f2a:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
     f2c:	86 b1       	in	r24, 0x06	; 6
     f2e:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
     f30:	89 b1       	in	r24, 0x09	; 9
     f32:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
     f34:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     f3e:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	bf 91       	pop	r27
     f48:	af 91       	pop	r26
     f4a:	9f 91       	pop	r25
     f4c:	8f 91       	pop	r24
     f4e:	7f 91       	pop	r23
     f50:	6f 91       	pop	r22
     f52:	5f 91       	pop	r21
     f54:	4f 91       	pop	r20
     f56:	3f 91       	pop	r19
     f58:	2f 91       	pop	r18
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <__vector_5>:

ISR(PCINT2_vect){
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_D);
	Switch.PinBuffer[0] = PINB;
     f86:	83 b1       	in	r24, 0x03	; 3
     f88:	ed e1       	ldi	r30, 0x1D	; 29
     f8a:	f1 e0       	ldi	r31, 0x01	; 1
     f8c:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
     f8e:	86 b1       	in	r24, 0x06	; 6
     f90:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
     f92:	89 b1       	in	r24, 0x09	; 9
     f94:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
     f96:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     fa0:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <_ZN10TimerClass5beginEv>:
}


uint64_t TimerClass::millis(){
	return Time;
}
     fc6:	60 e4       	ldi	r22, 0x40	; 64
     fc8:	7f e1       	ldi	r23, 0x1F	; 31
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z11Init_CTC_T1hj>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_ZN10TimerClass1iE>
     fd6:	08 95       	ret

00000fd8 <_ZN10TimerClass15initializeTimerEv>:
     fd8:	dc 01       	movw	r26, r24
     fda:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <_ZN10TimerClass1iE>
     fde:	e9 2f       	mov	r30, r25
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	e9 5c       	subi	r30, 0xC9	; 201
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	b1 83       	std	Z+1, r27	; 0x01
     fec:	a0 83       	st	Z, r26
     fee:	15 96       	adiw	r26, 0x05	; 5
     ff0:	9c 93       	st	X, r25
     ff2:	9f 5f       	subi	r25, 0xFF	; 255
     ff4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <_ZN10TimerClass1iE>
     ff8:	08 95       	ret

00000ffa <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
     ffa:	fc 01       	movw	r30, r24
     ffc:	71 83       	std	Z+1, r23	; 0x01
     ffe:	60 83       	st	Z, r22
    1000:	73 83       	std	Z+3, r23	; 0x03
    1002:	62 83       	std	Z+2, r22	; 0x02
    1004:	35 87       	std	Z+13, r19	; 0x0d
    1006:	24 87       	std	Z+12, r18	; 0x0c
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	83 87       	std	Z+11, r24	; 0x0b
    100c:	44 83       	std	Z+4, r20	; 0x04
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
    1014:	08 95       	ret

00001016 <_ZN10TimerClass18resetCallbackTimerEv>:
    1016:	fc 01       	movw	r30, r24
    1018:	13 86       	std	Z+11, r1	; 0x0b
    101a:	11 82       	std	Z+1, r1	; 0x01
    101c:	10 82       	st	Z, r1
    101e:	08 95       	ret

00001020 <_ZN10TimerClass15getCallBackTimeEv>:
    1020:	fc 01       	movw	r30, r24
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	20 81       	ld	r18, Z
    1028:	31 81       	ldd	r19, Z+1	; 0x01
    102a:	82 1b       	sub	r24, r18
    102c:	93 0b       	sbc	r25, r19
    102e:	08 95       	ret

00001030 <_ZN10TimerClass7setTimeEj>:
    1030:	fc 01       	movw	r30, r24
    1032:	77 83       	std	Z+7, r23	; 0x07
    1034:	66 83       	std	Z+6, r22	; 0x06
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	82 87       	std	Z+10, r24	; 0x0a
    103a:	71 87       	std	Z+9, r23	; 0x09
    103c:	60 87       	std	Z+8, r22	; 0x08
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
    1044:	08 95       	ret

00001046 <_ZN10TimerClass7getTimeEv>:
    1046:	fc 01       	movw	r30, r24
    1048:	80 85       	ldd	r24, Z+8	; 0x08
    104a:	91 85       	ldd	r25, Z+9	; 0x09
    104c:	26 81       	ldd	r18, Z+6	; 0x06
    104e:	37 81       	ldd	r19, Z+7	; 0x07
    1050:	82 1b       	sub	r24, r18
    1052:	93 0b       	sbc	r25, r19
    1054:	08 95       	ret

00001056 <_ZN10TimerClass10resetTimerEv>:
    1056:	fc 01       	movw	r30, r24
    1058:	17 82       	std	Z+7, r1	; 0x07
    105a:	16 82       	std	Z+6, r1	; 0x06
    105c:	12 86       	std	Z+10, r1	; 0x0a
    105e:	08 95       	ret

00001060 <_ZN10TimerClass11milliPassedEv>:

void TimerClass::milliPassed(){
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
	if(Count_EN){
    1066:	8b 85       	ldd	r24, Y+11	; 0x0b
    1068:	88 23       	and	r24, r24
    106a:	e1 f0       	breq	.+56     	; 0x10a4 <_ZN10TimerClass11milliPassedEv+0x44>
		#ifdef DEBUG_TIMER
		//printChar('T');
		#endif
		if(Count)
    106c:	88 81       	ld	r24, Y
    106e:	99 81       	ldd	r25, Y+1	; 0x01
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	29 f0       	breq	.+10     	; 0x107e <_ZN10TimerClass11milliPassedEv+0x1e>
		Count -= 1;
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	99 83       	std	Y+1, r25	; 0x01
    1078:	88 83       	st	Y, r24
		if(!Count){
    107a:	89 2b       	or	r24, r25
    107c:	99 f4       	brne	.+38     	; 0x10a4 <_ZN10TimerClass11milliPassedEv+0x44>
			if(Mode == TIMER_MODE_REPEAT){
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	29 f4       	brne	.+10     	; 0x108e <_ZN10TimerClass11milliPassedEv+0x2e>
				Count = Count_Save;
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	9b 81       	ldd	r25, Y+3	; 0x03
    1088:	99 83       	std	Y+1, r25	; 0x01
    108a:	88 83       	st	Y, r24
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <_ZN10TimerClass11milliPassedEv+0x38>
			}
			if(Mode == TIMER_MODE_ONCE){
    108e:	81 11       	cpse	r24, r1
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <_ZN10TimerClass11milliPassedEv+0x38>
				Count_EN = 0;
    1092:	1b 86       	std	Y+11, r1	; 0x0b
				Count = 0;
    1094:	19 82       	std	Y+1, r1	; 0x01
    1096:	18 82       	st	Y, r1
			}
			if(CallBackPtr != NULL){
    1098:	ec 85       	ldd	r30, Y+12	; 0x0c
    109a:	fd 85       	ldd	r31, Y+13	; 0x0d
    109c:	30 97       	sbiw	r30, 0x00	; 0
    109e:	11 f0       	breq	.+4      	; 0x10a4 <_ZN10TimerClass11milliPassedEv+0x44>
				#ifdef DEBUG_TIMER
				printStringCRNL("Timer Done : ");
				printNumber(Timer_ID);
				#endif
				//allowSleep(1);
				CallBackPtr(Timer_ID);
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	09 95       	icall
			}
		}
	}
	if(NCount_EN){
    10a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10a6:	88 23       	and	r24, r24
    10a8:	51 f0       	breq	.+20     	; 0x10be <_ZN10TimerClass11milliPassedEv+0x5e>
		if(NCount)
    10aa:	8e 81       	ldd	r24, Y+6	; 0x06
    10ac:	9f 81       	ldd	r25, Y+7	; 0x07
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	29 f0       	breq	.+10     	; 0x10bc <_ZN10TimerClass11milliPassedEv+0x5c>
		NCount -= 1;
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	9f 83       	std	Y+7, r25	; 0x07
    10b6:	8e 83       	std	Y+6, r24	; 0x06
		if(!NCount){
    10b8:	89 2b       	or	r24, r25
    10ba:	09 f4       	brne	.+2      	; 0x10be <_ZN10TimerClass11milliPassedEv+0x5e>
			NCount_EN = 0;
    10bc:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <_ZN10TimerClass19callAllTimerObjectsEv>:

void TimerClass::callAllTimerObjects(){
    10c4:	cf 93       	push	r28
	for(uint8_t a = 0; a < i; a += 1){
    10c6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZN10TimerClass1iE>
    10ca:	88 23       	and	r24, r24
    10cc:	91 f0       	breq	.+36     	; 0x10f2 <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    10ce:	c0 e0       	ldi	r28, 0x00	; 0
		if(Timers[a] != NULL)
    10d0:	ec 2f       	mov	r30, r28
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	e9 5c       	subi	r30, 0xC9	; 201
    10da:	fe 4f       	sbci	r31, 0xFE	; 254
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
		Timers[a]->milliPassed();
    10e4:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN10TimerClass11milliPassedEv>
		}
	}
}

void TimerClass::callAllTimerObjects(){
	for(uint8_t a = 0; a < i; a += 1){
    10e8:	cf 5f       	subi	r28, 0xFF	; 255
    10ea:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZN10TimerClass1iE>
    10ee:	c8 17       	cp	r28, r24
    10f0:	78 f3       	brcs	.-34     	; 0x10d0 <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
		if(Timers[a] != NULL)
		Timers[a]->milliPassed();
	}
}
    10f2:	cf 91       	pop	r28
    10f4:	08 95       	ret

000010f6 <_ZN10TimerClass10getTimerIDEv>:

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    10f6:	fc 01       	movw	r30, r24
    10f8:	85 81       	ldd	r24, Z+5	; 0x05
    10fa:	08 95       	ret

000010fc <__vector_11>:



ISR(TIMER1_COMPA_vect){
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	11 24       	eor	r1, r1
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
	//printChar('I');
	milliHappened();
    111e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z13milliHappenedv>
	Timer.Time += 1;
    1122:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <_ZN10TimerClass4TimeE>
    1126:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <_ZN10TimerClass4TimeE+0x1>
    112a:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <_ZN10TimerClass4TimeE+0x2>
    112e:	50 91 32 01 	lds	r21, 0x0132	; 0x800132 <_ZN10TimerClass4TimeE+0x3>
    1132:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <_ZN10TimerClass4TimeE+0x4>
    1136:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <_ZN10TimerClass4TimeE+0x5>
    113a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <_ZN10TimerClass4TimeE+0x6>
    113e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <_ZN10TimerClass4TimeE+0x7>
    1142:	a1 e0       	ldi	r26, 0x01	; 1
    1144:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__adddi3_s8>
    1148:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <_ZN10TimerClass4TimeE>
    114c:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <_ZN10TimerClass4TimeE+0x1>
    1150:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <_ZN10TimerClass4TimeE+0x2>
    1154:	50 93 32 01 	sts	0x0132, r21	; 0x800132 <_ZN10TimerClass4TimeE+0x3>
    1158:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <_ZN10TimerClass4TimeE+0x4>
    115c:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <_ZN10TimerClass4TimeE+0x5>
    1160:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_ZN10TimerClass4TimeE+0x6>
    1164:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    1168:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN10TimerClass19callAllTimerObjectsEv>
	//printChar('O');
}
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <_Z13switchPressedh>:
void portStateChange(uint8_t PortNo){
	printStringCRNL("Pin state changed");
	if(PortNo == PORT_C){
		setPinState(PORT_C, 2, getPinState(PORT_C, 0));
	}
}
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <SwitchPressedFlag>
    1194:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <SwitchID>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
    119e:	08 95       	ret

000011a0 <_Z9timerDoneh>:
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <TimeOut>
    11a6:	5a 98       	cbi	0x0b, 2	; 11
    11a8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
    11ac:	08 95       	ret

000011ae <_Z8runSetupv>:

void runSetup(){
	
	//USART_Init(MYUBRR);
	Init_CTC_T1(2,1000);
    11ae:	68 ee       	ldi	r22, 0xE8	; 232
    11b0:	73 e0       	ldi	r23, 0x03	; 3
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z11Init_CTC_T1hj>
	SPI_MasterInit();
    11b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14SPI_MasterInitv>
	setPinDirection(PORT_D, 2, 1);
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	62 e0       	ldi	r22, 0x02	; 2
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z15setPinDirectionhhb>
    11c6:	08 95       	ret

000011c8 <main>:
TimerClass Timer1, Timer2;
SwitchClass S1, S2, S3, S4, S5, S6;


int main(void)
{
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	29 97       	sbiw	r28, 0x09	; 9
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
	runSetup();
    11dc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_Z8runSetupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11e0:	2f ef       	ldi	r18, 0xFF	; 255
    11e2:	84 e3       	ldi	r24, 0x34	; 52
    11e4:	9c e0       	ldi	r25, 0x0C	; 12
    11e6:	21 50       	subi	r18, 0x01	; 1
    11e8:	80 40       	sbci	r24, 0x00	; 0
    11ea:	90 40       	sbci	r25, 0x00	; 0
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <main+0x1e>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <main+0x28>
    11f0:	00 00       	nop
	_delay_ms(500);
	Notify(PSTR("Powering on..."));
    11f2:	8d e6       	ldi	r24, 0x6D	; 109
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 ab 01 	call	0x356	; 0x356 <_Z6NotifyPKc>
	sei();
    11fa:	78 94       	sei
	TimeOut = false;
    11fc:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <TimeOut>
	NRF24L01 Radio(1,1,0);
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	41 e0       	ldi	r20, 0x01	; 1
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 2f 04 	call	0x85e	; 0x85e <_ZN8NRF24L01C1Ehhb>
	Radio.setTransmitAddress(0xEABABABAC1);
    120e:	01 ec       	ldi	r16, 0xC1	; 193
    1210:	1a eb       	ldi	r17, 0xBA	; 186
    1212:	2a eb       	ldi	r18, 0xBA	; 186
    1214:	3a eb       	ldi	r19, 0xBA	; 186
    1216:	4a ee       	ldi	r20, 0xEA	; 234
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	ce 01       	movw	r24, r28
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_ZN8NRF24L0118setTransmitAddressEy>
	Radio.setReceiveAddress(0xEABABABAC1, 0);
    1226:	e1 2c       	mov	r14, r1
    1228:	2a eb       	ldi	r18, 0xBA	; 186
    122a:	3a eb       	ldi	r19, 0xBA	; 186
    122c:	4a ee       	ldi	r20, 0xEA	; 234
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN8NRF24L0117setReceiveAddressEyh>
	Timer1.begin();
    123c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN10TimerClass5beginEv>
	Timer1.initializeTimer();
    1240:	81 ea       	ldi	r24, 0xA1	; 161
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN10TimerClass15initializeTimerEv>
	Timer2.initializeTimer();
    1248:	83 e9       	ldi	r24, 0x93	; 147
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 0, timerDone);
    1250:	20 ed       	ldi	r18, 0xD0	; 208
    1252:	38 e0       	ldi	r19, 0x08	; 8
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	64 e6       	ldi	r22, 0x64	; 100
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	81 ea       	ldi	r24, 0xA1	; 161
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	S1.begin();
    1262:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN11SwitchClass5beginEv>
	S1.initializeSwitch(PORT_B, 0, &S1); //1
    1266:	23 e6       	ldi	r18, 0x63	; 99
    1268:	32 e0       	ldi	r19, 0x02	; 2
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	c9 01       	movw	r24, r18
    1270:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S2.initializeSwitch(PORT_B, 6, &S2); //0
    1274:	23 e3       	ldi	r18, 0x33	; 51
    1276:	32 e0       	ldi	r19, 0x02	; 2
    1278:	46 e0       	ldi	r20, 0x06	; 6
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	c9 01       	movw	r24, r18
    127e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S3.initializeSwitch(PORT_B, 1, &S3); //6
    1282:	23 e0       	ldi	r18, 0x03	; 3
    1284:	32 e0       	ldi	r19, 0x02	; 2
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	c9 01       	movw	r24, r18
    128c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S4.initializeSwitch(PORT_B, 7, &S4);
    1290:	23 ed       	ldi	r18, 0xD3	; 211
    1292:	31 e0       	ldi	r19, 0x01	; 1
    1294:	47 e0       	ldi	r20, 0x07	; 7
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	c9 01       	movw	r24, r18
    129a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S5.initializeSwitch(PORT_D, 6, &S5);
    129e:	23 ea       	ldi	r18, 0xA3	; 163
    12a0:	31 e0       	ldi	r19, 0x01	; 1
    12a2:	46 e0       	ldi	r20, 0x06	; 6
    12a4:	62 e0       	ldi	r22, 0x02	; 2
    12a6:	c9 01       	movw	r24, r18
    12a8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S6.initializeSwitch(PORT_D, 7, &S6);
    12ac:	23 e7       	ldi	r18, 0x73	; 115
    12ae:	31 e0       	ldi	r19, 0x01	; 1
    12b0:	47 e0       	ldi	r20, 0x07	; 7
    12b2:	62 e0       	ldi	r22, 0x02	; 2
    12b4:	c9 01       	movw	r24, r18
    12b6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S1.shortPress(switchPressed);
    12ba:	67 ec       	ldi	r22, 0xC7	; 199
    12bc:	78 e0       	ldi	r23, 0x08	; 8
    12be:	83 e6       	ldi	r24, 0x63	; 99
    12c0:	92 e0       	ldi	r25, 0x02	; 2
    12c2:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN11SwitchClass10shortPressEPFvhE>
	S1.enableSamePtrMode(true);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	0e 94 18 05 	call	0xa30	; 0xa30 <_ZN11SwitchClass17enableSamePtrModeEb>
	Notify(PSTR("Done"));
    12cc:	88 e6       	ldi	r24, 0x68	; 104
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 ab 01 	call	0x356	; 0x356 <_Z6NotifyPKc>
	allowSleep(true);
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10allowSleepb>
	if(Radio.isRT_Max_Set())
    12da:	ce 01       	movw	r24, r28
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN8NRF24L0112isRT_Max_SetEv>
    12e2:	88 23       	and	r24, r24
    12e4:	21 f0       	breq	.+8      	; 0x12ee <main+0x126>
	Radio.clearRT_Max();
    12e6:	ce 01       	movw	r24, r28
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN8NRF24L0111clearRT_MaxEv>
	if(Radio.isTXFull())
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN8NRF24L018isTXFullEv>
    12f6:	88 23       	and	r24, r24
    12f8:	21 f0       	breq	.+8      	; 0x1302 <main+0x13a>
	Radio.flushTX();
    12fa:	ce 01       	movw	r24, r28
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN8NRF24L017flushTXEv>
	if(Radio.isTX_DS_Set())
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN8NRF24L0111isTX_DS_SetEv>
    130a:	88 23       	and	r24, r24
    130c:	21 f0       	breq	.+8      	; 0x1316 <main+0x14e>
	Radio.clearTX_DS();
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	0e 94 8f 03 	call	0x71e	; 0x71e <_ZN8NRF24L0110clearTX_DSEv>
	while (1)
	{	
		if(SwitchPressedFlag){
    1316:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SwitchPressedFlag>
    131a:	88 23       	and	r24, r24
    131c:	09 f4       	brne	.+2      	; 0x1320 <main+0x158>
    131e:	67 c0       	rjmp	.+206    	; 0x13ee <main+0x226>
			SwitchPressedFlag = false;
    1320:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <SwitchPressedFlag>
			#ifdef STATS
			printStringCRNL("Switch Pressed: ");
			printNumber(SwitchID);
			#endif
			if(SwitchID < 4){
    1324:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <SwitchID>
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	40 f4       	brcc	.+16     	; 0x133c <main+0x174>
				Radio.fastTransferPayload(SwitchID + 1);
    132c:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <SwitchID>
    1330:	6f 5f       	subi	r22, 0xFF	; 255
    1332:	ce 01       	movw	r24, r28
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	0e 94 41 04 	call	0x882	; 0x882 <_ZN8NRF24L0119fastTransferPayloadEh>
    133a:	0f c0       	rjmp	.+30     	; 0x135a <main+0x192>
			}
			else
			{
				if(SwitchID == 0x05)
    133c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <SwitchID>
    1340:	85 30       	cpi	r24, 0x05	; 5
    1342:	31 f4       	brne	.+12     	; 0x1350 <main+0x188>
				Radio.fastTransferPayload(0xD1);
    1344:	61 ed       	ldi	r22, 0xD1	; 209
    1346:	ce 01       	movw	r24, r28
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	0e 94 41 04 	call	0x882	; 0x882 <_ZN8NRF24L0119fastTransferPayloadEh>
    134e:	05 c0       	rjmp	.+10     	; 0x135a <main+0x192>
				else
				Radio.fastTransferPayload(0xD0);
    1350:	60 ed       	ldi	r22, 0xD0	; 208
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	0e 94 41 04 	call	0x882	; 0x882 <_ZN8NRF24L0119fastTransferPayloadEh>
			}
			TimeOut = false;
    135a:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <TimeOut>
			Timer2.setCallBackTime(50, 0, timerDone);
    135e:	20 ed       	ldi	r18, 0xD0	; 208
    1360:	38 e0       	ldi	r19, 0x08	; 8
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	62 e3       	ldi	r22, 0x32	; 50
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	83 e9       	ldi	r24, 0x93	; 147
    136a:	92 e0       	ldi	r25, 0x02	; 2
    136c:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
			while(Radio.isTX_DS_Set() != 0x20 && !TimeOut){
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN8NRF24L0111isTX_DS_SetEv>
    1378:	80 32       	cpi	r24, 0x20	; 32
    137a:	09 f4       	brne	.+2      	; 0x137e <main+0x1b6>
    137c:	57 c0       	rjmp	.+174    	; 0x142c <main+0x264>
    137e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <TimeOut>
    1382:	81 11       	cpse	r24, r1
    1384:	53 c0       	rjmp	.+166    	; 0x142c <main+0x264>
    1386:	f4 cf       	rjmp	.-24     	; 0x1370 <main+0x1a8>
				
			}
			if(Radio.isTX_DS_Set() == 0x20){
				LED = 1;
    1388:	5a 9a       	sbi	0x0b, 2	; 11
				Radio.clearTX_DS();
    138a:	ce 01       	movw	r24, r28
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	0e 94 8f 03 	call	0x71e	; 0x71e <_ZN8NRF24L0110clearTX_DSEv>
				Timer1.setCallBackTime(50, 0, timerDone);
    1392:	20 ed       	ldi	r18, 0xD0	; 208
    1394:	38 e0       	ldi	r19, 0x08	; 8
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	62 e3       	ldi	r22, 0x32	; 50
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	81 ea       	ldi	r24, 0xA1	; 161
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
				Timer2.resetCallbackTimer();
    13a4:	83 e9       	ldi	r24, 0x93	; 147
    13a6:	92 e0       	ldi	r25, 0x02	; 2
    13a8:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN10TimerClass18resetCallbackTimerEv>
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <main+0x1ea>
				printStringCRNL("Payload transmitted.");
				#endif
				//Radio.flushTX();
			}
			else{
				TimeOut = false;
    13ae:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <TimeOut>
				//Radio.flushTX();
				#ifdef STATS
				printStringCRNL("Timed out");
				#endif
			}
			if(Radio.isRT_Max_Set())
    13b2:	ce 01       	movw	r24, r28
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN8NRF24L0112isRT_Max_SetEv>
    13ba:	88 23       	and	r24, r24
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <main+0x1fe>
			Radio.clearRT_Max();
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN8NRF24L0111clearRT_MaxEv>
			if(Radio.isTXFull())
    13c6:	ce 01       	movw	r24, r28
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN8NRF24L018isTXFullEv>
    13ce:	88 23       	and	r24, r24
    13d0:	21 f0       	breq	.+8      	; 0x13da <main+0x212>
			Radio.flushTX();
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN8NRF24L017flushTXEv>
			if(Radio.isTX_DS_Set())
    13da:	ce 01       	movw	r24, r28
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN8NRF24L0111isTX_DS_SetEv>
    13e2:	88 23       	and	r24, r24
    13e4:	21 f0       	breq	.+8      	; 0x13ee <main+0x226>
			Radio.clearTX_DS();
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 8f 03 	call	0x71e	; 0x71e <_ZN8NRF24L0110clearTX_DSEv>
			#ifdef STATS
			Radio.printInfo();
			#endif
		}
		if(sleepAllowed()){
    13ee:	0e 94 67 00 	call	0xce	; 0xce <_Z12sleepAllowedv>
    13f2:	88 23       	and	r24, r24
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <main+0x230>
    13f6:	8f cf       	rjmp	.-226    	; 0x1316 <main+0x14e>
			#ifdef STATS
			printStringCRNL("Sleeping...");
			#endif
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    13f8:	83 b7       	in	r24, 0x33	; 51
    13fa:	81 7f       	andi	r24, 0xF1	; 241
    13fc:	84 60       	ori	r24, 0x04	; 4
    13fe:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
    1400:	83 b7       	in	r24, 0x33	; 51
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	83 bf       	out	0x33, r24	; 51
			sei();
    1406:	78 94       	sei
			getReadyToSleep();
    1408:	0e 94 5d 00 	call	0xba	; 0xba <_Z15getReadyToSleepv>
			CE = 0;
    140c:	40 98       	cbi	0x08, 0	; 8
			sleep_mode();
    140e:	83 b7       	in	r24, 0x33	; 51
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	83 bf       	out	0x33, r24	; 51
    1414:	88 95       	sleep
    1416:	83 b7       	in	r24, 0x33	; 51
    1418:	8e 7f       	andi	r24, 0xFE	; 254
    141a:	83 bf       	out	0x33, r24	; 51
			CE = 1;
    141c:	40 9a       	sbi	0x08, 0	; 8
    141e:	8f e3       	ldi	r24, 0x3F	; 63
    1420:	9c e9       	ldi	r25, 0x9C	; 156
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <main+0x25a>
    1426:	00 c0       	rjmp	.+0      	; 0x1428 <main+0x260>
    1428:	00 00       	nop
    142a:	75 cf       	rjmp	.-278    	; 0x1316 <main+0x14e>
			TimeOut = false;
			Timer2.setCallBackTime(50, 0, timerDone);
			while(Radio.isTX_DS_Set() != 0x20 && !TimeOut){
				
			}
			if(Radio.isTX_DS_Set() == 0x20){
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN8NRF24L0111isTX_DS_SetEv>
    1434:	80 32       	cpi	r24, 0x20	; 32
    1436:	09 f0       	breq	.+2      	; 0x143a <main+0x272>
    1438:	ba cf       	rjmp	.-140    	; 0x13ae <main+0x1e6>
    143a:	a6 cf       	rjmp	.-180    	; 0x1388 <main+0x1c0>

0000143c <__ashldi3>:
    143c:	0f 93       	push	r16
    143e:	08 30       	cpi	r16, 0x08	; 8
    1440:	90 f0       	brcs	.+36     	; 0x1466 <__ashldi3+0x2a>
    1442:	98 2f       	mov	r25, r24
    1444:	87 2f       	mov	r24, r23
    1446:	76 2f       	mov	r23, r22
    1448:	65 2f       	mov	r22, r21
    144a:	54 2f       	mov	r21, r20
    144c:	43 2f       	mov	r20, r19
    144e:	32 2f       	mov	r19, r18
    1450:	22 27       	eor	r18, r18
    1452:	08 50       	subi	r16, 0x08	; 8
    1454:	f4 cf       	rjmp	.-24     	; 0x143e <__ashldi3+0x2>
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	44 1f       	adc	r20, r20
    145c:	55 1f       	adc	r21, r21
    145e:	66 1f       	adc	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	88 1f       	adc	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 95       	dec	r16
    1468:	b2 f7       	brpl	.-20     	; 0x1456 <__ashldi3+0x1a>
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <__ashrdi3>:
    146e:	97 fb       	bst	r25, 7
    1470:	10 f8       	bld	r1, 0

00001472 <__lshrdi3>:
    1472:	16 94       	lsr	r1
    1474:	00 08       	sbc	r0, r0
    1476:	0f 93       	push	r16
    1478:	08 30       	cpi	r16, 0x08	; 8
    147a:	98 f0       	brcs	.+38     	; 0x14a2 <__lshrdi3+0x30>
    147c:	08 50       	subi	r16, 0x08	; 8
    147e:	23 2f       	mov	r18, r19
    1480:	34 2f       	mov	r19, r20
    1482:	45 2f       	mov	r20, r21
    1484:	56 2f       	mov	r21, r22
    1486:	67 2f       	mov	r22, r23
    1488:	78 2f       	mov	r23, r24
    148a:	89 2f       	mov	r24, r25
    148c:	90 2d       	mov	r25, r0
    148e:	f4 cf       	rjmp	.-24     	; 0x1478 <__lshrdi3+0x6>
    1490:	05 94       	asr	r0
    1492:	97 95       	ror	r25
    1494:	87 95       	ror	r24
    1496:	77 95       	ror	r23
    1498:	67 95       	ror	r22
    149a:	57 95       	ror	r21
    149c:	47 95       	ror	r20
    149e:	37 95       	ror	r19
    14a0:	27 95       	ror	r18
    14a2:	0a 95       	dec	r16
    14a4:	aa f7       	brpl	.-22     	; 0x1490 <__lshrdi3+0x1e>
    14a6:	0f 91       	pop	r16
    14a8:	08 95       	ret

000014aa <__adddi3_s8>:
    14aa:	00 24       	eor	r0, r0
    14ac:	a7 fd       	sbrc	r26, 7
    14ae:	00 94       	com	r0
    14b0:	2a 0f       	add	r18, r26
    14b2:	30 1d       	adc	r19, r0
    14b4:	40 1d       	adc	r20, r0
    14b6:	50 1d       	adc	r21, r0
    14b8:	60 1d       	adc	r22, r0
    14ba:	70 1d       	adc	r23, r0
    14bc:	80 1d       	adc	r24, r0
    14be:	90 1d       	adc	r25, r0
    14c0:	08 95       	ret

000014c2 <_exit>:
    14c2:	f8 94       	cli

000014c4 <__stop_program>:
    14c4:	ff cf       	rjmp	.-2      	; 0x14c4 <__stop_program>
